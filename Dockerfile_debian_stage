
FROM debian:stable-slim

ENV container=docker
STOPSIGNAL SIGRTMIN+3
VOLUME [ "/tmp", "/run", "/run/lock" ]
WORKDIR /

# FROM HERE
# https://www.cyberciti.biz/faq/perl-warning-setting-locale-failed-in-debian-ubuntu/
ENV LANG=en_US.UTF-8 \
    LANGUAGE=en_US:en \
    LC_CTYPE="en_US.UTF-8" \
    LC_NUMERIC="en_US.UTF-8" \
    LC_TIME="en_US.UTF-8" \
    LC_COLLATE="en_US.UTF-8" \
    LC_MONETARY="en_US.UTF-8" \
    LC_MESSAGES="en_US.UTF-8" \
    LC_PAPER="en_US.UTF-8" \
    LC_NAME="en_US.UTF-8" \
    LC_ADDRESS="en_US.UTF-8" \
    LC_TELEPHONE="en_US.UTF-8" \
    LC_MEASUREMENT="en_US.UTF-8" \
    LC_IDENTIFICATION="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8"

# avoid user interaction
ARG DEBIAN_FRONTEND=noninteractive 

# CONFIGURE SHELL
SHELL ["/usr/bin/bash", "-c"]

# set language first
RUN --mount=type=cache,target=/var/cache/apt \
    --mount=type=cache,target=/var/lib/apt \
    set -euxo \
    && apt-get update --yes \
    && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends --no-install-suggests --yes --quiet --quiet  apt-utils \
    locales \
    apt-transport-https \
    apt-utils \
    locales \
    locales-all

RUN --mount=type=cache,target=/var/cache/apt \
    --mount=type=cache,target=/var/lib/apt \
    set -euxo \
    && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends --no-install-suggests --yes --quiet --quiet lxde-core \
    lxde-icon-theme \
    lxsession-default-apps \
    lxterminal \
    net-tools \
    notification-daemon \
    x11-apps \
    x11-utils \
    x11vnc \
    x11-xserver-utils \
    xdg-utils \
    xorgxrdp \
    xrdp \
    xvfb \
    openssh-server \
    sudo \
    chromium \
    chromium-driver \
    curl \
    ca-certificates \
    gzip \
    tar \
    libasound2 \
    libasound2-plugins \
    pulseaudio \
    pulseaudio-utils \
    pulsemixer \
    upower \
    build-essential \
    lsof \
    vim \
    git \
    htop \
    bash-completion \
    tree \
    valgrind \
    && rm /etc/xrdp/rsakeys.ini /etc/xrdp/cert.pem /etc/xrdp/key.pem \
    && mv /usr/bin/lxpolkit /usr/bin/lxpolkit.disabled \
    && apt-get --yes autoclean \ 
    && apt-get --yes --auto-remove autoremove \
    && apt-get clean --yes \
    && rm --recursive --force /var/lib/apt/lists/* 

# new user
ENV PUID='1000' \
    PGID='1000' \
    USER='user'


RUN set -euxo \ 
    && groupadd --gid "$PGID" "$USER"  \
    && useradd --home-dir /home/$USER --shell /bin/bash --uid "$PUID" --gid "$PGID" "$USER"  \
    && mkdir /home/$USER \
    && chown -R $USER:$USER /home/$USER  \
    && usermod -aG sudo "$USER"  \
    && usermod -aG adm "$USER"  \
    && usermod -aG audio "$USER"  \
    && cp /etc/skel/.bashrc /home/user/  \
    && mkdir -p /etc/sudoers.d  \
    && echo "user ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/"${USER}" \
    && chmod 0440 /etc/sudoers.d/"$USER" \
    && cp /etc/skel/.bashrc /home/${USER} \
    && echo "${USER}:user" | chpasswd \
    && cp /etc/skel/.profile /home/"${USER}"

COPY scripts/.gitconfig /home/user 

RUN set -euxo \ 
    && chown user:user /home/user/.gitconfig

# install rust system wide
# FROM HERE https://github.com/rust-lang/rustup/issues/1085
# root part
RUN set -euxo \
    && RUSTUP_HOME=/opt/rust \
    && export RUSTUP_HOME \
    && CARGO_HOME=/opt/rust \
    && export CARGO_HOME \
    && curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path --profile minimal \
    && rustup component add rustfmt 
# for cargo crates index NOT inside production system

RUN set -euxo \
    && mkdir /opt/rust/registry \
    && chmod -R o+xrw /opt/rust/registry

# --profile minimal
# https://rust-lang.github.io/rustup/concepts/profiles.html

#    --no-modify-path
#          Don't configure the PATH environment variable

# set cargo path for ROOT amd USER
# set command cargo to path
RUN set -euxo \
    && echo "export RUSTUP_HOME=/opt/rust" >>/etc/profile \
    && echo "export CARGO_HOME=/opt/rust" >>/etc/profile \
    && echo "export RUSTUP_HOME=/opt/rust" >>/root/.profile \
    && echo "export CARGO_HOME=/opt/rust" >>/root/.profile \
    && echo "export RUSTUP_HOME=/opt/rust" >>/root/.bashrc \
    && echo "export CARGO_HOME=/opt/rust" >>/root/.bashrc \
    && echo "export RUSTUP_HOME=/opt/rust" >>/home/user/.profile \
    && echo "export CARGO_HOME=/opt/rust" >>/home/user/.profile \
    && echo "export RUSTUP_HOME=/opt/rust" >>/home/user/.bashrc \
    && echo "export CARGO_HOME=/opt/rust" >>/home/user/.bashrc \
    && echo "export PATH=\"/opt/rust/bin:$PATH\"" >>/root/.bashrc \
    && echo "export PATH=\"/opt/rust/bin:$PATH\"" >>/root/.profile \
    && echo "export PATH=\"/opt/rust/bin:$PATH\"" >>/home/user/.bashrc \
    && echo "export PATH=\"/opt/rust/bin:$PATH\"" >>/home/user/.profile

COPY desktop_settings/desktop-items-0.conf  /root/.config/pcmanfm/LXDE/desktop-items-0.conf 
COPY desktop_settings/lxterminal.conf  /root/.config/lxterminal/lxterminal.conf
COPY scripts /scripts/

# FROM HERE
# https://dev.to/s1ntaxe770r/how-to-setup-ssh-within-a-docker-container-i5i
# enable ssh passwort access
RUN set -euxo \ 
    && sed -i "s/.*PasswordAuthentication.*/PasswordAuthentication yes/g" /etc/ssh/sshd_config 

#PORT for sshd
EXPOSE 22

# copy and set scripts execute 
COPY scripts/bootstrap.sh /scripts/
RUN set -euxo \
    && chmod +x /scripts/bootstrap.sh \
    && chmod +x /scripts/start_chromedriver.sh

ENTRYPOINT ["/scripts/bootstrap.sh"]

# remove empty space
# :g/^ /norm dw
# sort
# cat /tmp/t.txt |sort

# docker buildx build --progress=plain -t debian_stage_next -f Dockerfile_debian_stage "."

# docker buildx build --cache-from=type=local,src=/path/to/cache --cache-to=type=local,dest=/path/to/cache

# docker buildx build --cache-from=type=local,src=/var/private_docker_cache --cache-to=type=local,dest=/var/private_docker_cache --progress=plain -t debian_stage_cache1 -f Dockerfile_debian_xvfb_stage "."

# docker buildx build --progress=plain --no-cache  -t debian_stage_s8 -f Dockerfile_debian_xvfb_stage "."


# docker run -it --hostname stage debian_stage bash
