FROM debian:stable-slim


ENV container=docker
STOPSIGNAL SIGRTMIN+3
VOLUME [ "/tmp", "/run", "/run/lock" ]
WORKDIR /

# FROM HERE
# https://www.cyberciti.biz/faq/perl-warning-setting-locale-failed-in-debian-ubuntu/
ENV LANG=en_US.UTF-8 \
    LANGUAGE=en_US:en \
    LC_CTYPE="en_US.UTF-8" \
    LC_NUMERIC="en_US.UTF-8" \
    LC_TIME="en_US.UTF-8" \
    LC_COLLATE="en_US.UTF-8" \
    LC_MONETARY="en_US.UTF-8" \
    LC_MESSAGES="en_US.UTF-8" \
    LC_PAPER="en_US.UTF-8" \
    LC_NAME="en_US.UTF-8" \
    LC_ADDRESS="en_US.UTF-8" \
    LC_TELEPHONE="en_US.UTF-8" \
    LC_MEASUREMENT="en_US.UTF-8" \
    LC_IDENTIFICATION="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8"

# avoid user interaction
ARG DEBIAN_FRONTEND=noninteractive 

# CONFIGURE SHELL
# SHELL ["/usr/bin/bash", "-c"]

# set language first
RUN --mount=type=cache,target=/var/cache/apt \
    --mount=type=cache,target=/var/lib/apt \
    set -euxo \
    && apt-get update --yes \
    && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends --no-install-suggests --yes --quiet --quiet  apt-utils \
    locales \
    apt-transport-https \
    apt-utils \
    locales \
    locales-all

RUN --mount=type=cache,target=/var/cache/apt \
    --mount=type=cache,target=/var/lib/apt \
    set -euxo \
    && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends --no-install-suggests --yes --quiet --quiet lxde-core \
    lxde-icon-theme \
    lxsession-default-apps \
    lxterminal \
    net-tools \
    notification-daemon \
    x11-apps \
    x11-utils \
    x11vnc \
    x11-xserver-utils \
    xdg-utils \
    xorgxrdp \
    xrdp \
    xvfb \
    openssh-server \
    sudo \
    chromium \
    chromium-driver \
    curl \
    ca-certificates \
    gzip \
    tar \
    libasound2 \
    libasound2-plugins \
    pulseaudio \
    set -euxo \
    pulseaudio-utils \
    pulsemixer \
    upower \
    build-essential \
    lsof \
    vim \
    git \
    htop \
    bash-completion \
    tree \
    valgrind \
    && rm /etc/xrdp/rsakeys.ini /etc/xrdp/cert.pem /etc/xrdp/key.pem \
    && mv /usr/bin/lxpolkit /usr/bin/lxpolkit.disabled \
    && apt-get --yes autoclean \ 
    && apt-get --yes --auto-remove autoremove \
    && apt-get clean --yes \
    && rm --recursive --force /var/lib/apt/lists/* 
# new user
ENV PUID='1000' \
    PGID='1000' \
    USER='user'

# useradd and sudoers
RUN --mount=type=cache,target=/var/cache/apt \
    --mount=type=cache,target=/var/lib/apt \
    set -euxo \ 
    && groupadd --gid "$PGID" "$USER"  \
    && useradd --home-dir /home/$USER --shell /bin/bash --uid "$PUID" --gid "$PGID" "$USER"  \
    && mkdir /home/$USER \
    && chown -R $USER:$USER /home/$USER  \
    && usermod -aG sudo "$USER"  \
    && usermod -aG adm "$USER"  \
    && usermod -aG audio "$USER"  \
    && cp /etc/skel/.bashrc /home/user/  \
    && mkdir -p /etc/sudoers.d  \
    && echo "user ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/"${USER}" \
    && chmod 0440 /etc/sudoers.d/"$USER" \
    && cp /etc/skel/.bashrc /home/${USER} \
    && echo "${USER}:user" | chpasswd


# copy git configuration   
COPY scripts/.gitconfig /home/user 
# copy git configuration
RUN set -euxo \ 
    && chown "${USER}":"${USER}" /home/user/.gitconfig


# old please remove
# COPY scripts/start_sshd.sh /scripts/start_sshd.sh


# install rust via rustup
RUN --mount=type=cache,target=/var/cache/apt \
    --mount=type=cache,target=/var/lib/apt \
    set -euxo \
    && curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y



# copy desktop and terminal settings
COPY desktop_settings/desktop-items-0.conf  /root/.config/pcmanfm/LXDE/desktop-items-0.conf
COPY desktop_settings/lxterminal.conf  /root/.config/lxterminal/lxterminal.conf

COPY scripts /scripts/

# enable ssh passwort access
RUN --mount=type=cache,target=/var/cache/apt \
    --mount=type=cache,target=/var/lib/apt \
    set -euxo \ 
    && sed -i "s/.*PasswordAuthentication.*/PasswordAuthentication yes/g" /etc/ssh/sshd_config 

# expose port 22 for ssh access 
EXPOSE 22


# # copy rust folder
# RUN cp -r "/root/.cargo" "/home/user" 

# #set user rights
# RUN chown -R "user:user" "/home/user/.cargo/"

# # set command cargo to path
# RUN echo "export PATH=\"/home/user/.cargo/bin:$PATH\"" >>/home/user/.bashrc

# RUN touch /home/user/.profile
# RUN echo "export PATH=\"/home/user/.cargo/bin:$PATH\"" >>/home/user/.profile

# copy rust folder
RUN cp -r "/root/.cargo" "/home/user" 

#set user rights
RUN chown -R "user:user" "/home/user/.cargo/"

# set command cargo to path
RUN echo "export PATH=\"/home/user/.cargo/bin:$PATH\"" >>/home/user/.bashrc

RUN touch /home/user/.profile
RUN echo "export PATH=\"/home/user/.cargo/bin:$PATH\"" >>/home/user/.profile

# USER settings
USER user
RUN echo "I am $HOME, with uid $UID"

RUN set -euxo \ 
    && /home/user/.cargo/bin/rustup default stable \
    && /home/user/.cargo/bin/rustup update 
# && /home/user/.cargo/bin/cargo install cargo-cache \
# && /home/user/.cargo/bin/cargo cache

# user end

USER root
RUN echo "I am $HOME, with uid $UID"

# copy bootstrap script
COPY scripts/bootstrap.sh /scripts/
RUN chmod +x /scripts/bootstrap.sh
# ENTRYPOINT ["/scripts/bootstrap.sh"]

ENTRYPOINT ["/scripts/bootstrap.sh"]

# CMD ["/usr/bin/bash"]

# https://devopscube.com/run-scripts-docker-arguments/ 


# remove empty space
# :g/^ /norm dw
# sort
# cat /tmp/t.txt |sort

# docker buildx build --progress=plain -t debian_stage_rustup_next -f Dockerfile_debian_xvfb_stage_rustup "."

# docker buildx build --progress=plain --no-cache -t debian_stage_rustup_next -f Dockerfile_debian_xvfb_stage_rustup "."

# docker buildx build --cache-from=type=local,src=/path/to/cache --cache-to=type=local,dest=/path/to/cache

# docker buildx build --cache-from=type=local,src=/var/private_docker_cache --cache-to=type=local,dest=/var/private_docker_cache --progress=plain -t debian_stage_cache1 -f Dockerfile_debian_xvfb_stage "."

# docker buildx build --progress=plain --no-cache  -t debian_stage_next -f Dockerfile_debian_xvfb_stage "."

# /w rustup
# docker buildx build --progress=plain --no-cache  -t debian_stage_s9 -f Dockerfile_debian_xvfb_stage_rustup "."



# docker run -it --hostname stage debian_stage bash

# --entrypoint bash 
